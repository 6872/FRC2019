// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6872.FRC2019.subsystems;

import java.util.concurrent.ArrayBlockingQueue;

import org.usfirst.frc6872.FRC2019.commands.*;
import org.usfirst.frc6872.FRC2019.sensors.VL53L0XSensors;

import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.PIDSource;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.DoubleSolenoid.Value;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.VictorSP;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class Tower extends PIDSubsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
    public static final double Ground = 0.5;
    public static final double Robot = 1;
    public static final double BallLoad = 2;
    public static final double Ball1 = 1;
    public static final double Ball2 = 2;
    public static final double Ball3 = 3;
    public static final double DiskLoad = 1;
    public static final double Disk1 = 1;
    public static final double Disk2 = 2;
    public static final double Disk3 = 3;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    private boolean isPistonExtended = false;
    private VL53L0XSensors distance;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private VictorSP winch;
    private DoubleSolenoid solenoid;
    private AnalogInput analogInput;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public void setPiston(boolean extended) {
        solenoid.set(extended ? Value.kForward : Value.kReverse);
        isPistonExtended = extended;
    }

    public boolean getPistonState() {
        //return solenoid.get() == Value.kForward;
        return isPistonExtended;
    }

    // Initialize your subsystem here
    public Tower() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        super("Tower", 0.001, 0.001, 0.005);
        setAbsoluteTolerance(0.2);
        getPIDController().setContinuous(false);
        getPIDController().setName("Tower", "PIDSubsystem Controller");
        LiveWindow.add(getPIDController());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        
        distance = new VL53L0XSensors();
        boolean success = distance.init();
        if (success) {
            System.out.println("VL53L0X sensors initialized.");
        } else {
            System.out.println("VL53L0X sensors NOT initialized!!!!!");
        }

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        winch = new VictorSP(6);
        addChild("Winch",winch);
        winch.setInverted(false);
        
        solenoid = new DoubleSolenoid(0, 2, 1);
        addChild("Solenoid",solenoid);
        
        
        analogInput = new AnalogInput(0);
        addChild("Analog Input",analogInput);
        
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        solenoid.set(isPistonExtended ? Value.kForward : Value.kReverse);


        // Use these to get going:
        // setSetpoint() -  Sets where the PID controller should move the system
        //                  to
        // enable() - Enables the PID controller.
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }

    @Override
    protected double returnPIDInput() {
        // Return your input value for the PID loop
        // e.g. a sensor, like a potentiometer:
        // yourPot.getAverageVoltage() / kYourMaxVoltage;
    /*
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
        return analogInput.getAverageVoltage();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
    */
        StringBuilder sb = new StringBuilder();
        int i = 0;
        int min = 10000;
		for (ArrayBlockingQueue queue : distance.arrayBlockingQueueList) {
		    Object result = queue.poll();
		    if (result != null) {
                int dist = (int) result;
                sb.append("Range");
                sb.append(Integer.toString(i++));
                sb.append(": ");
                sb.append(Integer.toString(dist));
                sb.append(" ");
                if (dist < min) min = dist;
            }
        }
        sb.append("\n");
        System.out.println(sb.toString());
        return min;
    }

    @Override
    protected void usePIDOutput(double output) {
        // Use output to drive your system, like a motor
        // e.g. yourMotor.set(output);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
        winch.pidWrite(output);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

}
